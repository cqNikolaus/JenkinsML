pipeline {
    agent any

    parameters {
        // Datei-Parameter: Beim "Mit Parametern bauen" erscheint ein Upload-Feld.
        file(name: 'CSV_FILE', description: 'Bitte die CSV-Datei zum Training hochladen')
        // Optional: Weitere Parameter, z. B. zur Auswahl des Modells
        string(name: 'MODEL_NAME', defaultValue: 'random_forest', description: 'Modellname: random_forest, gradient_boosting, logistic_regression, xgboost')
        string(name: 'DATE_COLUMNS', defaultValue: '', description: 'Optionale, kommagetrennte Liste von Datumsspalten')
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        stage('Build Docker Image') {
            steps {
                script {
                    // Hier wird der Dockerfile aus dem Unterverzeichnis "training" verwendet
                    dockerImage = docker.build("ml-model:latest", "-f training/Dockerfile training/")
                }
            }
        }
        stage('Run Training') {
            steps {
                script {
                    // Der File-Parameter "CSV_FILE" wird im Workspace abgelegt.
                    // Wir mounten den gesamten Workspace in den Container unter /app/workspace
                    // und verweisen in der CLI auf die hochgeladene Datei.
                    def inputCsvPath = "/app/workspace/CSV_FILE"  // Datei wird im Workspace als "CSV_FILE" abgelegt
                    def outputModelPath = "/app/workspace/model.pkl"
                    def cmd = "python train_model.py --input_csv ${inputCsvPath} --model_name ${params.MODEL_NAME} --output_model ${outputModelPath}"

                    if (params.DATE_COLUMNS?.trim()) {
                        cmd += " --date_columns ${params.DATE_COLUMNS}"
                    }

                    echo "Starte Training mit Befehl: ${cmd}"

                    // FÃ¼hre den Container aus und mounte den Workspace
                    dockerImage.run("--rm -v ${env.WORKSPACE}:/app/workspace", cmd)
                }
            }
        }
    }
}
