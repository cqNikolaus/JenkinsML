pipeline {
  agent any
  parameters {
    stashedFile(name: 'model.plk', description: 'Das Trainierte Modell (PLK-Datei)')
    base64File(name: 'INPUT_DATA', description: 'CSV-Datei mit den Build-Daten, um die Erfolgswahrscheinlichkeit des n√§chsten Durchlaufs vorherzusagen')
  }
  stages {
    stage('Build Docker Image') {
      steps {
        sh 'cp training/train_model.py ./prediction'
        sh 'docker build -t prediction-image ./prediction'
      }
    }
    stage('Prepare files') {
        steps {
            withFileParameter('INPUT_DATA') {
                sh 'cp $INPUT_DATA input_data.csv'
                unstash 'model.plk'
                sh 'cp model.plk model2.plk'
            }
        }
    }
    stage('Run Prediction') {
      steps {
        sh """
        docker rm prediction-container
        docker create --name prediction-container prediction-image tail -f /dev/null
        docker cp jenkins:${env.WORKSPACE}/input_data.csv /tmp
        docker cp jenkins:${env.WORKSPACE}/model2.plk /tmp
        docker cp /tmp/input_data.csv prediction-container:/app
        docker cp /tmp/model2.plk prediction-container:/app
        docker start prediction-container
        docker exec prediction-container python predict.py --model model2.plk --data input_data.csv
        docker stop prediction-container
        docker rm prediction-container
        """
      }
    }
  }
}
